//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ePs.MicoFormIntegration.Service.MiForms.SyncServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SyncServicesSoap", Namespace="http://www.mi-corporation.com/")]
    public partial class SyncServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAppsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppFileListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAppActiveStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadAppViaStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplateMFTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplateJSONOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplateJSONAndSVGOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplatePageBackgroundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplateSVGOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFormTemplateActiveStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFormTemplateOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFormTemplateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SyncServices() {
            this.Url = global::ePs.MicoFormIntegration.Service.Properties.Settings.Default.MiFormsIntegrationService_MiForms_SyncServices_SyncServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAppsCompletedEventHandler GetAppsCompleted;
        
        /// <remarks/>
        public event GetAppFileListCompletedEventHandler GetAppFileListCompleted;
        
        /// <remarks/>
        public event GetAppFilesCompletedEventHandler GetAppFilesCompleted;
        
        /// <remarks/>
        public event SetAppActiveStatusCompletedEventHandler SetAppActiveStatusCompleted;
        
        /// <remarks/>
        public event UploadAppCompletedEventHandler UploadAppCompleted;
        
        /// <remarks/>
        public event UploadAppViaStringCompletedEventHandler UploadAppViaStringCompleted;
        
        /// <remarks/>
        public event GetFormTemplatesCompletedEventHandler GetFormTemplatesCompleted;
        
        /// <remarks/>
        public event GetFormTemplateMFTCompletedEventHandler GetFormTemplateMFTCompleted;
        
        /// <remarks/>
        public event GetFormTemplateJSONCompletedEventHandler GetFormTemplateJSONCompleted;
        
        /// <remarks/>
        public event GetFormTemplateJSONAndSVGCompletedEventHandler GetFormTemplateJSONAndSVGCompleted;
        
        /// <remarks/>
        public event GetFormTemplatePageBackgroundCompletedEventHandler GetFormTemplatePageBackgroundCompleted;
        
        /// <remarks/>
        public event GetFormTemplateSVGCompletedEventHandler GetFormTemplateSVGCompleted;
        
        /// <remarks/>
        public event SetFormTemplateActiveStatusCompletedEventHandler SetFormTemplateActiveStatusCompleted;
        
        /// <remarks/>
        public event SetFormTemplateOptionsCompletedEventHandler SetFormTemplateOptionsCompleted;
        
        /// <remarks/>
        public event UploadFormTemplateCompletedEventHandler UploadFormTemplateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetApps", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetApps(string customerName, string token, string userName, bool includeInactive) {
            object[] results = this.Invoke("GetApps", new object[] {
                        customerName,
                        token,
                        userName,
                        includeInactive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppsAsync(string customerName, string token, string userName, bool includeInactive) {
            this.GetAppsAsync(customerName, token, userName, includeInactive, null);
        }
        
        /// <remarks/>
        public void GetAppsAsync(string customerName, string token, string userName, bool includeInactive, object userState) {
            if ((this.GetAppsOperationCompleted == null)) {
                this.GetAppsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppsOperationCompleted);
            }
            this.InvokeAsync("GetApps", new object[] {
                        customerName,
                        token,
                        userName,
                        includeInactive}, this.GetAppsOperationCompleted, userState);
        }
        
        private void OnGetAppsOperationCompleted(object arg) {
            if ((this.GetAppsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppsCompleted(this, new GetAppsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetAppFileList", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppFileList(string customerName, string token, string appId, string appVersion) {
            object[] results = this.Invoke("GetAppFileList", new object[] {
                        customerName,
                        token,
                        appId,
                        appVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppFileListAsync(string customerName, string token, string appId, string appVersion) {
            this.GetAppFileListAsync(customerName, token, appId, appVersion, null);
        }
        
        /// <remarks/>
        public void GetAppFileListAsync(string customerName, string token, string appId, string appVersion, object userState) {
            if ((this.GetAppFileListOperationCompleted == null)) {
                this.GetAppFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppFileListOperationCompleted);
            }
            this.InvokeAsync("GetAppFileList", new object[] {
                        customerName,
                        token,
                        appId,
                        appVersion}, this.GetAppFileListOperationCompleted, userState);
        }
        
        private void OnGetAppFileListOperationCompleted(object arg) {
            if ((this.GetAppFileListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppFileListCompleted(this, new GetAppFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetAppFiles", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppFiles(string customerName, string token, string appId, string appVersion, string[] appFiles) {
            object[] results = this.Invoke("GetAppFiles", new object[] {
                        customerName,
                        token,
                        appId,
                        appVersion,
                        appFiles});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppFilesAsync(string customerName, string token, string appId, string appVersion, string[] appFiles) {
            this.GetAppFilesAsync(customerName, token, appId, appVersion, appFiles, null);
        }
        
        /// <remarks/>
        public void GetAppFilesAsync(string customerName, string token, string appId, string appVersion, string[] appFiles, object userState) {
            if ((this.GetAppFilesOperationCompleted == null)) {
                this.GetAppFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppFilesOperationCompleted);
            }
            this.InvokeAsync("GetAppFiles", new object[] {
                        customerName,
                        token,
                        appId,
                        appVersion,
                        appFiles}, this.GetAppFilesOperationCompleted, userState);
        }
        
        private void OnGetAppFilesOperationCompleted(object arg) {
            if ((this.GetAppFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppFilesCompleted(this, new GetAppFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/SetAppActiveStatus", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetAppActiveStatus(string customerName, string token, string appId, bool isActive) {
            object[] results = this.Invoke("SetAppActiveStatus", new object[] {
                        customerName,
                        token,
                        appId,
                        isActive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetAppActiveStatusAsync(string customerName, string token, string appId, bool isActive) {
            this.SetAppActiveStatusAsync(customerName, token, appId, isActive, null);
        }
        
        /// <remarks/>
        public void SetAppActiveStatusAsync(string customerName, string token, string appId, bool isActive, object userState) {
            if ((this.SetAppActiveStatusOperationCompleted == null)) {
                this.SetAppActiveStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAppActiveStatusOperationCompleted);
            }
            this.InvokeAsync("SetAppActiveStatus", new object[] {
                        customerName,
                        token,
                        appId,
                        isActive}, this.SetAppActiveStatusOperationCompleted, userState);
        }
        
        private void OnSetAppActiveStatusOperationCompleted(object arg) {
            if ((this.SetAppActiveStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAppActiveStatusCompleted(this, new SetAppActiveStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/UploadApp", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadApp(string customerName, string token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] appData, bool requireValidation) {
            object[] results = this.Invoke("UploadApp", new object[] {
                        customerName,
                        token,
                        appData,
                        requireValidation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadAppAsync(string customerName, string token, byte[] appData, bool requireValidation) {
            this.UploadAppAsync(customerName, token, appData, requireValidation, null);
        }
        
        /// <remarks/>
        public void UploadAppAsync(string customerName, string token, byte[] appData, bool requireValidation, object userState) {
            if ((this.UploadAppOperationCompleted == null)) {
                this.UploadAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadAppOperationCompleted);
            }
            this.InvokeAsync("UploadApp", new object[] {
                        customerName,
                        token,
                        appData,
                        requireValidation}, this.UploadAppOperationCompleted, userState);
        }
        
        private void OnUploadAppOperationCompleted(object arg) {
            if ((this.UploadAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadAppCompleted(this, new UploadAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/UploadAppViaString", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadAppViaString(string customerName, string token, string appData, bool requireValidation) {
            object[] results = this.Invoke("UploadAppViaString", new object[] {
                        customerName,
                        token,
                        appData,
                        requireValidation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadAppViaStringAsync(string customerName, string token, string appData, bool requireValidation) {
            this.UploadAppViaStringAsync(customerName, token, appData, requireValidation, null);
        }
        
        /// <remarks/>
        public void UploadAppViaStringAsync(string customerName, string token, string appData, bool requireValidation, object userState) {
            if ((this.UploadAppViaStringOperationCompleted == null)) {
                this.UploadAppViaStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadAppViaStringOperationCompleted);
            }
            this.InvokeAsync("UploadAppViaString", new object[] {
                        customerName,
                        token,
                        appData,
                        requireValidation}, this.UploadAppViaStringOperationCompleted, userState);
        }
        
        private void OnUploadAppViaStringOperationCompleted(object arg) {
            if ((this.UploadAppViaStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadAppViaStringCompleted(this, new UploadAppViaStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetFormTemplates", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormTemplates(string customerName, string token, string userName, bool includeInactive) {
            object[] results = this.Invoke("GetFormTemplates", new object[] {
                        customerName,
                        token,
                        userName,
                        includeInactive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplatesAsync(string customerName, string token, string userName, bool includeInactive) {
            this.GetFormTemplatesAsync(customerName, token, userName, includeInactive, null);
        }
        
        /// <remarks/>
        public void GetFormTemplatesAsync(string customerName, string token, string userName, bool includeInactive, object userState) {
            if ((this.GetFormTemplatesOperationCompleted == null)) {
                this.GetFormTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplates", new object[] {
                        customerName,
                        token,
                        userName,
                        includeInactive}, this.GetFormTemplatesOperationCompleted, userState);
        }
        
        private void OnGetFormTemplatesOperationCompleted(object arg) {
            if ((this.GetFormTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplatesCompleted(this, new GetFormTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetFormTemplateMFT", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormTemplateMFT(string customerName, string token, string formId, int revision) {
            object[] results = this.Invoke("GetFormTemplateMFT", new object[] {
                        customerName,
                        token,
                        formId,
                        revision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplateMFTAsync(string customerName, string token, string formId, int revision) {
            this.GetFormTemplateMFTAsync(customerName, token, formId, revision, null);
        }
        
        /// <remarks/>
        public void GetFormTemplateMFTAsync(string customerName, string token, string formId, int revision, object userState) {
            if ((this.GetFormTemplateMFTOperationCompleted == null)) {
                this.GetFormTemplateMFTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplateMFTOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplateMFT", new object[] {
                        customerName,
                        token,
                        formId,
                        revision}, this.GetFormTemplateMFTOperationCompleted, userState);
        }
        
        private void OnGetFormTemplateMFTOperationCompleted(object arg) {
            if ((this.GetFormTemplateMFTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplateMFTCompleted(this, new GetFormTemplateMFTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetFormTemplateJSON", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormTemplateJSON(string customerName, string token, string formId, int revision) {
            object[] results = this.Invoke("GetFormTemplateJSON", new object[] {
                        customerName,
                        token,
                        formId,
                        revision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplateJSONAsync(string customerName, string token, string formId, int revision) {
            this.GetFormTemplateJSONAsync(customerName, token, formId, revision, null);
        }
        
        /// <remarks/>
        public void GetFormTemplateJSONAsync(string customerName, string token, string formId, int revision, object userState) {
            if ((this.GetFormTemplateJSONOperationCompleted == null)) {
                this.GetFormTemplateJSONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplateJSONOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplateJSON", new object[] {
                        customerName,
                        token,
                        formId,
                        revision}, this.GetFormTemplateJSONOperationCompleted, userState);
        }
        
        private void OnGetFormTemplateJSONOperationCompleted(object arg) {
            if ((this.GetFormTemplateJSONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplateJSONCompleted(this, new GetFormTemplateJSONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetFormTemplateJSONAndSVG", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormTemplateJSONAndSVG(string customerName, string token, string formId, int revision) {
            object[] results = this.Invoke("GetFormTemplateJSONAndSVG", new object[] {
                        customerName,
                        token,
                        formId,
                        revision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplateJSONAndSVGAsync(string customerName, string token, string formId, int revision) {
            this.GetFormTemplateJSONAndSVGAsync(customerName, token, formId, revision, null);
        }
        
        /// <remarks/>
        public void GetFormTemplateJSONAndSVGAsync(string customerName, string token, string formId, int revision, object userState) {
            if ((this.GetFormTemplateJSONAndSVGOperationCompleted == null)) {
                this.GetFormTemplateJSONAndSVGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplateJSONAndSVGOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplateJSONAndSVG", new object[] {
                        customerName,
                        token,
                        formId,
                        revision}, this.GetFormTemplateJSONAndSVGOperationCompleted, userState);
        }
        
        private void OnGetFormTemplateJSONAndSVGOperationCompleted(object arg) {
            if ((this.GetFormTemplateJSONAndSVGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplateJSONAndSVGCompleted(this, new GetFormTemplateJSONAndSVGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetFormTemplatePageBackground", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormTemplatePageBackground(string customerName, string token, string formId, int revision, int page) {
            object[] results = this.Invoke("GetFormTemplatePageBackground", new object[] {
                        customerName,
                        token,
                        formId,
                        revision,
                        page});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplatePageBackgroundAsync(string customerName, string token, string formId, int revision, int page) {
            this.GetFormTemplatePageBackgroundAsync(customerName, token, formId, revision, page, null);
        }
        
        /// <remarks/>
        public void GetFormTemplatePageBackgroundAsync(string customerName, string token, string formId, int revision, int page, object userState) {
            if ((this.GetFormTemplatePageBackgroundOperationCompleted == null)) {
                this.GetFormTemplatePageBackgroundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplatePageBackgroundOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplatePageBackground", new object[] {
                        customerName,
                        token,
                        formId,
                        revision,
                        page}, this.GetFormTemplatePageBackgroundOperationCompleted, userState);
        }
        
        private void OnGetFormTemplatePageBackgroundOperationCompleted(object arg) {
            if ((this.GetFormTemplatePageBackgroundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplatePageBackgroundCompleted(this, new GetFormTemplatePageBackgroundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/GetFormTemplateSVG", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormTemplateSVG(string customerName, string token, string formId, int revision, int page) {
            object[] results = this.Invoke("GetFormTemplateSVG", new object[] {
                        customerName,
                        token,
                        formId,
                        revision,
                        page});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplateSVGAsync(string customerName, string token, string formId, int revision, int page) {
            this.GetFormTemplateSVGAsync(customerName, token, formId, revision, page, null);
        }
        
        /// <remarks/>
        public void GetFormTemplateSVGAsync(string customerName, string token, string formId, int revision, int page, object userState) {
            if ((this.GetFormTemplateSVGOperationCompleted == null)) {
                this.GetFormTemplateSVGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplateSVGOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplateSVG", new object[] {
                        customerName,
                        token,
                        formId,
                        revision,
                        page}, this.GetFormTemplateSVGOperationCompleted, userState);
        }
        
        private void OnGetFormTemplateSVGOperationCompleted(object arg) {
            if ((this.GetFormTemplateSVGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplateSVGCompleted(this, new GetFormTemplateSVGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/SetFormTemplateActiveStatus", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetFormTemplateActiveStatus(string customerName, string token, string formId, bool isActive) {
            object[] results = this.Invoke("SetFormTemplateActiveStatus", new object[] {
                        customerName,
                        token,
                        formId,
                        isActive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetFormTemplateActiveStatusAsync(string customerName, string token, string formId, bool isActive) {
            this.SetFormTemplateActiveStatusAsync(customerName, token, formId, isActive, null);
        }
        
        /// <remarks/>
        public void SetFormTemplateActiveStatusAsync(string customerName, string token, string formId, bool isActive, object userState) {
            if ((this.SetFormTemplateActiveStatusOperationCompleted == null)) {
                this.SetFormTemplateActiveStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFormTemplateActiveStatusOperationCompleted);
            }
            this.InvokeAsync("SetFormTemplateActiveStatus", new object[] {
                        customerName,
                        token,
                        formId,
                        isActive}, this.SetFormTemplateActiveStatusOperationCompleted, userState);
        }
        
        private void OnSetFormTemplateActiveStatusOperationCompleted(object arg) {
            if ((this.SetFormTemplateActiveStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFormTemplateActiveStatusCompleted(this, new SetFormTemplateActiveStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/SetFormTemplateOptions", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetFormTemplateOptions(string customerName, string token, string formId, bool renderThumbnails, bool renderAllInk, bool renderCleanInk, bool renderFieldValues, int renderDPI, bool runAfterOpen, bool overridePaperlikeInterface, bool allowPODInkMerging) {
            object[] results = this.Invoke("SetFormTemplateOptions", new object[] {
                        customerName,
                        token,
                        formId,
                        renderThumbnails,
                        renderAllInk,
                        renderCleanInk,
                        renderFieldValues,
                        renderDPI,
                        runAfterOpen,
                        overridePaperlikeInterface,
                        allowPODInkMerging});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetFormTemplateOptionsAsync(string customerName, string token, string formId, bool renderThumbnails, bool renderAllInk, bool renderCleanInk, bool renderFieldValues, int renderDPI, bool runAfterOpen, bool overridePaperlikeInterface, bool allowPODInkMerging) {
            this.SetFormTemplateOptionsAsync(customerName, token, formId, renderThumbnails, renderAllInk, renderCleanInk, renderFieldValues, renderDPI, runAfterOpen, overridePaperlikeInterface, allowPODInkMerging, null);
        }
        
        /// <remarks/>
        public void SetFormTemplateOptionsAsync(string customerName, string token, string formId, bool renderThumbnails, bool renderAllInk, bool renderCleanInk, bool renderFieldValues, int renderDPI, bool runAfterOpen, bool overridePaperlikeInterface, bool allowPODInkMerging, object userState) {
            if ((this.SetFormTemplateOptionsOperationCompleted == null)) {
                this.SetFormTemplateOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFormTemplateOptionsOperationCompleted);
            }
            this.InvokeAsync("SetFormTemplateOptions", new object[] {
                        customerName,
                        token,
                        formId,
                        renderThumbnails,
                        renderAllInk,
                        renderCleanInk,
                        renderFieldValues,
                        renderDPI,
                        runAfterOpen,
                        overridePaperlikeInterface,
                        allowPODInkMerging}, this.SetFormTemplateOptionsOperationCompleted, userState);
        }
        
        private void OnSetFormTemplateOptionsOperationCompleted(object arg) {
            if ((this.SetFormTemplateOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFormTemplateOptionsCompleted(this, new SetFormTemplateOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mi-corporation.com/UploadFormTemplate", RequestNamespace="http://www.mi-corporation.com/", ResponseNamespace="http://www.mi-corporation.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFormTemplate(string customerName, string token, string formData) {
            object[] results = this.Invoke("UploadFormTemplate", new object[] {
                        customerName,
                        token,
                        formData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFormTemplateAsync(string customerName, string token, string formData) {
            this.UploadFormTemplateAsync(customerName, token, formData, null);
        }
        
        /// <remarks/>
        public void UploadFormTemplateAsync(string customerName, string token, string formData, object userState) {
            if ((this.UploadFormTemplateOperationCompleted == null)) {
                this.UploadFormTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFormTemplateOperationCompleted);
            }
            this.InvokeAsync("UploadFormTemplate", new object[] {
                        customerName,
                        token,
                        formData}, this.UploadFormTemplateOperationCompleted, userState);
        }
        
        private void OnUploadFormTemplateOperationCompleted(object arg) {
            if ((this.UploadFormTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFormTemplateCompleted(this, new UploadFormTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAppsCompletedEventHandler(object sender, GetAppsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAppFileListCompletedEventHandler(object sender, GetAppFileListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAppFilesCompletedEventHandler(object sender, GetAppFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SetAppActiveStatusCompletedEventHandler(object sender, SetAppActiveStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAppActiveStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAppActiveStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void UploadAppCompletedEventHandler(object sender, UploadAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void UploadAppViaStringCompletedEventHandler(object sender, UploadAppViaStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadAppViaStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadAppViaStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFormTemplatesCompletedEventHandler(object sender, GetFormTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFormTemplateMFTCompletedEventHandler(object sender, GetFormTemplateMFTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplateMFTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplateMFTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFormTemplateJSONCompletedEventHandler(object sender, GetFormTemplateJSONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplateJSONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplateJSONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFormTemplateJSONAndSVGCompletedEventHandler(object sender, GetFormTemplateJSONAndSVGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplateJSONAndSVGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplateJSONAndSVGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFormTemplatePageBackgroundCompletedEventHandler(object sender, GetFormTemplatePageBackgroundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplatePageBackgroundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplatePageBackgroundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFormTemplateSVGCompletedEventHandler(object sender, GetFormTemplateSVGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplateSVGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplateSVGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SetFormTemplateActiveStatusCompletedEventHandler(object sender, SetFormTemplateActiveStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFormTemplateActiveStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFormTemplateActiveStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SetFormTemplateOptionsCompletedEventHandler(object sender, SetFormTemplateOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFormTemplateOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFormTemplateOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void UploadFormTemplateCompletedEventHandler(object sender, UploadFormTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFormTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFormTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591